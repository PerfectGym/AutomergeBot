Cannot merge automatically. @{{gitHubUserName}} please resolve conflicts manually, approve review and merge pull request.
Be aware that when someone's PR has not been merged before yours PR and then has been merged,
yours PR still has info about conflicts.
Github does not update it and lies that conflicts are present. 

**How to do it** (using the **GIT Bash** command line):
1. Merge code from `{{destinationBranch}}` into your pull request and resolve conflicts.
   ```
   git fetch -q && git checkout -q -B {{pullRequestBranchName}} origin/{{destinationBranch}} && git merge --no-ff origin/{{pullRequestBranchName}} 
   ```
   >Explanation: we do small hack here - PR's branch locally reset to destination branch and then merge PR's actual branch to it.
2. Push the code with resolved conflicts
   ```
   git push origin {{pullRequestBranchName}}:{{pullRequestBranchName}}
   ```
3. Wait until TeamCity (CI) mark pull request as OK. It should take no more than 20minutes after pushing last change.
4. Approve [pull request]({{pullRequestUrl}}/files#submit-review) review
5. Merge [pull request]({{pullRequestUrl}}). 
   **Important** - remember to do (*Merge commit*) 
   ~~Squash and merge~~ cannot be used for merging changes across release branches.
6. Remove temporary branch from Your computer
   ```
   git checkout - && git branch -D {{pullRequestBranchName}}
   ```
-----

If the instruction above from some reason is not working for You please try to use older instruction:
1. Fetch changes from server and checkout '{{destinationBranch}}' branch.
   Then merge 'origin/{{pullRequestBranchName}}' branch and resolve conflicts
   ```
   git fetch -q && git checkout -q {{destinationBranch}} && git reset -q --hard @{u} && git merge --no-ff origin/{{pullRequestBranchName}}
   ```
2. Approve [pull request]({{pullRequestUrl}}/files#submit-review) review
3. Push changes to {{destinationBranch}}
   ```
   git push origin {{destinationBranch}}
   ```

